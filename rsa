import java.math.BigInteger;
import java.util.Random;
import java.util.Scanner;

public class RSA {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        // Input two prime numbers
        System.out.print("Enter a Prime number (p): ");
        BigInteger p = sc.nextBigInteger();
        System.out.print("Enter another Prime number (q): ");
        BigInteger q = sc.nextBigInteger();

        // Compute n and Ï†(n)
        BigInteger n = p.multiply(q);
        BigInteger phi = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));

        // Generate public exponent e
        BigInteger e = generateE(phi);
        
        // Compute private key d
        BigInteger d = e.modInverse(phi);

        // Output keys
        System.out.println("Public Key (e, n): (" + e + ", " + n + ")");
        System.out.println("Private Key (d, n): (" + d + ", " + n + ")");
    }

    // Method to generate a valid public exponent e
    public static BigInteger generateE(BigInteger phi) {
        BigInteger e;
        Random rand = new Random();
        do {
            e = BigInteger.probablePrime(16, rand); // Generates a small prime for e
        } while (!e.gcd(phi).equals(BigInteger.ONE) || e.compareTo(BigInteger.TWO) <= 0);
        return e;
    }
}
