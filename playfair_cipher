import java.awt.Point;

class Main {
    private static char[][] table = new char[5][5];
    private static Point[] pos = new Point[26];

    private static String prepareText(String s) {
        return s.toUpperCase().replaceAll("[^A-Z]", "").replace("J", "I");
    }

    private static void createTable(String key) {
        String s = prepareText(key + "ABCDEFGHIKLMNOPQRSTUVWXYZ");
        System.out.println(s);
        int k = 0;
        for (char c : s.toCharArray()) {
            if (pos[c - 'A'] == null) {
                table[k / 5][k % 5] = c;
                pos[c - 'A'] = new Point(k % 5, k / 5);
                k++;
            }
        }
    }

    private static String process(String text, int dir) {
        StringBuilder sb = new StringBuilder(text);
        for (int i = 0; i < sb.length(); i += 2) {
            char a = sb.charAt(i), b = sb.charAt(i + 1);
            int r1 = pos[a - 'A'].y, c1 = pos[a - 'A'].x;
            int r2 = pos[b - 'A'].y, c2 = pos[b - 'A'].x;
            if (r1 == r2) { c1 = (c1 + dir + 5) % 5; c2 = (c2 + dir + 5) % 5; }
            else if (c1 == c2) { r1 = (r1 + dir + 5) % 5; r2 = (r2 + dir + 5) % 5; }
            else { int tmp = c1; c1 = c2; c2 = tmp; }
            sb.setCharAt(i, table[r1][c1]);
            sb.setCharAt(i + 1, table[r2][c2]);
        }
        return sb.toString();
    }

    private static String encode(String text) {
        StringBuilder sb = new StringBuilder(prepareText(text));
        for (int i = 0; i < sb.length(); i += 2) {
            if (i == sb.length() - 1 || sb.charAt(i) == sb.charAt(i + 1)) {
                sb.insert(i + 1, 'X');
            }
        }
        return process(sb.toString(), 1);
    }

    private static String decode(String text) {
        return process(text, -1);
    }

    public static void main(String[] args) {
        String key = "CSE", text = "Security Lab";
        createTable(key);
        String encrypted = encode(text);
        System.out.println("Encrypted: " + encrypted);
        System.out.println("Decrypted: " + decode(encrypted));
    }
}
